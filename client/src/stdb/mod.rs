// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.6.0 (commit 3c16edb3503eab8aad562e011d7fb452e051267d).

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

pub mod admin_add_gold_reducer;
pub mod admin_daily_update_reducer;
pub mod admin_delete_node_recursive_reducer;
pub mod admin_sync_link_ratings_reducer;
pub mod admin_upload_world_reducer;
pub mod content_deselect_link_reducer;
pub mod content_publish_node_reducer;
pub mod content_rotation_reducer;
pub mod content_select_link_reducer;
pub mod content_vote_node_reducer;
pub mod daily_update_reducer_reducer;
pub mod daily_update_timer_table;
pub mod daily_update_timer_type;
pub mod global_data_table;
pub mod global_data_type;
pub mod global_settings_table;
pub mod global_settings_type;
pub mod identity_disconnected_reducer;
pub mod login_by_identity_reducer;
pub mod login_reducer;
pub mod logout_reducer;
pub mod match_bench_unit_reducer;
pub mod match_buy_fusion_slot_reducer;
pub mod match_complete_reducer;
pub mod match_g_type;
pub mod match_insert_reducer;
pub mod match_move_unit_reducer;
pub mod match_sell_unit_reducer;
pub mod match_shop_buy_reducer;
pub mod match_shop_reroll_reducer;
pub mod match_start_battle_reducer;
pub mod match_submit_battle_result_reducer;
pub mod node_links_table;
pub mod nodes_world_table;
pub mod player_link_selections_table;
pub mod register_reducer;
pub mod set_password_reducer;
pub mod t_node_link_type;
pub mod t_node_type;
pub mod t_player_link_selection_type;

pub use admin_add_gold_reducer::{
    admin_add_gold, set_flags_for_admin_add_gold, AdminAddGoldCallbackId,
};
pub use admin_daily_update_reducer::{
    admin_daily_update, set_flags_for_admin_daily_update, AdminDailyUpdateCallbackId,
};
pub use admin_delete_node_recursive_reducer::{
    admin_delete_node_recursive, set_flags_for_admin_delete_node_recursive,
    AdminDeleteNodeRecursiveCallbackId,
};
pub use admin_sync_link_ratings_reducer::{
    admin_sync_link_ratings, set_flags_for_admin_sync_link_ratings, AdminSyncLinkRatingsCallbackId,
};
pub use admin_upload_world_reducer::{
    admin_upload_world, set_flags_for_admin_upload_world, AdminUploadWorldCallbackId,
};
pub use content_deselect_link_reducer::{
    content_deselect_link, set_flags_for_content_deselect_link, ContentDeselectLinkCallbackId,
};
pub use content_publish_node_reducer::{
    content_publish_node, set_flags_for_content_publish_node, ContentPublishNodeCallbackId,
};
pub use content_rotation_reducer::{
    content_rotation, set_flags_for_content_rotation, ContentRotationCallbackId,
};
pub use content_select_link_reducer::{
    content_select_link, set_flags_for_content_select_link, ContentSelectLinkCallbackId,
};
pub use content_vote_node_reducer::{
    content_vote_node, set_flags_for_content_vote_node, ContentVoteNodeCallbackId,
};
pub use daily_update_reducer_reducer::{
    daily_update_reducer, set_flags_for_daily_update_reducer, DailyUpdateReducerCallbackId,
};
pub use daily_update_timer_table::*;
pub use daily_update_timer_type::DailyUpdateTimer;
pub use global_data_table::*;
pub use global_data_type::GlobalData;
pub use global_settings_table::*;
pub use global_settings_type::GlobalSettings;
pub use identity_disconnected_reducer::{
    identity_disconnected, set_flags_for_identity_disconnected, IdentityDisconnectedCallbackId,
};
pub use login_by_identity_reducer::{
    login_by_identity, set_flags_for_login_by_identity, LoginByIdentityCallbackId,
};
pub use login_reducer::{login, set_flags_for_login, LoginCallbackId};
pub use logout_reducer::{logout, set_flags_for_logout, LogoutCallbackId};
pub use match_bench_unit_reducer::{
    match_bench_unit, set_flags_for_match_bench_unit, MatchBenchUnitCallbackId,
};
pub use match_buy_fusion_slot_reducer::{
    match_buy_fusion_slot, set_flags_for_match_buy_fusion_slot, MatchBuyFusionSlotCallbackId,
};
pub use match_complete_reducer::{
    match_complete, set_flags_for_match_complete, MatchCompleteCallbackId,
};
pub use match_g_type::MatchG;
pub use match_insert_reducer::{match_insert, set_flags_for_match_insert, MatchInsertCallbackId};
pub use match_move_unit_reducer::{
    match_move_unit, set_flags_for_match_move_unit, MatchMoveUnitCallbackId,
};
pub use match_sell_unit_reducer::{
    match_sell_unit, set_flags_for_match_sell_unit, MatchSellUnitCallbackId,
};
pub use match_shop_buy_reducer::{
    match_shop_buy, set_flags_for_match_shop_buy, MatchShopBuyCallbackId,
};
pub use match_shop_reroll_reducer::{
    match_shop_reroll, set_flags_for_match_shop_reroll, MatchShopRerollCallbackId,
};
pub use match_start_battle_reducer::{
    match_start_battle, set_flags_for_match_start_battle, MatchStartBattleCallbackId,
};
pub use match_submit_battle_result_reducer::{
    match_submit_battle_result, set_flags_for_match_submit_battle_result,
    MatchSubmitBattleResultCallbackId,
};
pub use node_links_table::*;
pub use nodes_world_table::*;
pub use player_link_selections_table::*;
pub use register_reducer::{register, set_flags_for_register, RegisterCallbackId};
pub use set_password_reducer::{set_flags_for_set_password, set_password, SetPasswordCallbackId};
pub use t_node_link_type::TNodeLink;
pub use t_node_type::TNode;
pub use t_player_link_selection_type::TPlayerLinkSelection;

#[derive(Clone, PartialEq, Debug)]

/// One of the reducers defined by this module.
///
/// Contained within a [`__sdk::ReducerEvent`] in [`EventContext`]s for reducer events
/// to indicate which reducer caused the event.

pub enum Reducer {
    AdminAddGold,
    AdminDailyUpdate,
    AdminDeleteNodeRecursive {
        id: u64,
    },
    AdminSyncLinkRatings,
    AdminUploadWorld {
        global_settings: GlobalSettings,
        nodes: Vec<String>,
        links: Vec<String>,
    },
    ContentDeselectLink {
        parent_id: u64,
        child_id: u64,
    },
    ContentPublishNode {
        pack: String,
    },
    ContentRotation,
    ContentSelectLink {
        parent_id: u64,
        child_id: u64,
    },
    ContentVoteNode {
        id: u64,
        vote: bool,
    },
    DailyUpdateReducer {
        timer: DailyUpdateTimer,
    },
    IdentityDisconnected,
    Login {
        name: String,
        pass: String,
    },
    LoginByIdentity,
    Logout,
    MatchBenchUnit {
        unit_id: u64,
    },
    MatchBuyFusionSlot {
        fusion_id: u64,
    },
    MatchComplete,
    MatchInsert,
    MatchMoveUnit {
        unit_id: u64,
        target_id: u64,
    },
    MatchSellUnit {
        unit_id: u64,
    },
    MatchShopBuy {
        shop_idx: u8,
    },
    MatchShopReroll,
    MatchStartBattle,
    MatchSubmitBattleResult {
        id: u64,
        result: bool,
        hash: u64,
    },
    Register {
        name: String,
        pass: String,
    },
    SetPassword {
        old_pass: String,
        new_pass: String,
    },
}

impl __sdk::InModule for Reducer {
    type Module = RemoteModule;
}

impl __sdk::Reducer for Reducer {
    fn reducer_name(&self) -> &'static str {
        match self {
            Reducer::AdminAddGold => "admin_add_gold",
            Reducer::AdminDailyUpdate => "admin_daily_update",
            Reducer::AdminDeleteNodeRecursive { .. } => "admin_delete_node_recursive",
            Reducer::AdminSyncLinkRatings => "admin_sync_link_ratings",
            Reducer::AdminUploadWorld { .. } => "admin_upload_world",
            Reducer::ContentDeselectLink { .. } => "content_deselect_link",
            Reducer::ContentPublishNode { .. } => "content_publish_node",
            Reducer::ContentRotation => "content_rotation",
            Reducer::ContentSelectLink { .. } => "content_select_link",
            Reducer::ContentVoteNode { .. } => "content_vote_node",
            Reducer::DailyUpdateReducer { .. } => "daily_update_reducer",
            Reducer::IdentityDisconnected => "identity_disconnected",
            Reducer::Login { .. } => "login",
            Reducer::LoginByIdentity => "login_by_identity",
            Reducer::Logout => "logout",
            Reducer::MatchBenchUnit { .. } => "match_bench_unit",
            Reducer::MatchBuyFusionSlot { .. } => "match_buy_fusion_slot",
            Reducer::MatchComplete => "match_complete",
            Reducer::MatchInsert => "match_insert",
            Reducer::MatchMoveUnit { .. } => "match_move_unit",
            Reducer::MatchSellUnit { .. } => "match_sell_unit",
            Reducer::MatchShopBuy { .. } => "match_shop_buy",
            Reducer::MatchShopReroll => "match_shop_reroll",
            Reducer::MatchStartBattle => "match_start_battle",
            Reducer::MatchSubmitBattleResult { .. } => "match_submit_battle_result",
            Reducer::Register { .. } => "register",
            Reducer::SetPassword { .. } => "set_password",
        }
    }
}
impl TryFrom<__ws::ReducerCallInfo<__ws::BsatnFormat>> for Reducer {
    type Error = __sdk::Error;
    fn try_from(value: __ws::ReducerCallInfo<__ws::BsatnFormat>) -> __sdk::Result<Self> {
        match &value.reducer_name[..] {
            "admin_add_gold" => Ok(__sdk::parse_reducer_args::<
                admin_add_gold_reducer::AdminAddGoldArgs,
            >("admin_add_gold", &value.args)?
            .into()),
            "admin_daily_update" => Ok(__sdk::parse_reducer_args::<
                admin_daily_update_reducer::AdminDailyUpdateArgs,
            >("admin_daily_update", &value.args)?
            .into()),
            "admin_delete_node_recursive" => {
                Ok(__sdk::parse_reducer_args::<
                    admin_delete_node_recursive_reducer::AdminDeleteNodeRecursiveArgs,
                >("admin_delete_node_recursive", &value.args)?
                .into())
            }
            "admin_sync_link_ratings" => Ok(__sdk::parse_reducer_args::<
                admin_sync_link_ratings_reducer::AdminSyncLinkRatingsArgs,
            >("admin_sync_link_ratings", &value.args)?
            .into()),
            "admin_upload_world" => Ok(__sdk::parse_reducer_args::<
                admin_upload_world_reducer::AdminUploadWorldArgs,
            >("admin_upload_world", &value.args)?
            .into()),
            "content_deselect_link" => Ok(__sdk::parse_reducer_args::<
                content_deselect_link_reducer::ContentDeselectLinkArgs,
            >("content_deselect_link", &value.args)?
            .into()),
            "content_publish_node" => Ok(__sdk::parse_reducer_args::<
                content_publish_node_reducer::ContentPublishNodeArgs,
            >("content_publish_node", &value.args)?
            .into()),
            "content_rotation" => Ok(__sdk::parse_reducer_args::<
                content_rotation_reducer::ContentRotationArgs,
            >("content_rotation", &value.args)?
            .into()),
            "content_select_link" => Ok(__sdk::parse_reducer_args::<
                content_select_link_reducer::ContentSelectLinkArgs,
            >("content_select_link", &value.args)?
            .into()),
            "content_vote_node" => Ok(__sdk::parse_reducer_args::<
                content_vote_node_reducer::ContentVoteNodeArgs,
            >("content_vote_node", &value.args)?
            .into()),
            "daily_update_reducer" => Ok(__sdk::parse_reducer_args::<
                daily_update_reducer_reducer::DailyUpdateReducerArgs,
            >("daily_update_reducer", &value.args)?
            .into()),
            "identity_disconnected" => Ok(__sdk::parse_reducer_args::<
                identity_disconnected_reducer::IdentityDisconnectedArgs,
            >("identity_disconnected", &value.args)?
            .into()),
            "login" => Ok(__sdk::parse_reducer_args::<login_reducer::LoginArgs>(
                "login",
                &value.args,
            )?
            .into()),
            "login_by_identity" => Ok(__sdk::parse_reducer_args::<
                login_by_identity_reducer::LoginByIdentityArgs,
            >("login_by_identity", &value.args)?
            .into()),
            "logout" => Ok(__sdk::parse_reducer_args::<logout_reducer::LogoutArgs>(
                "logout",
                &value.args,
            )?
            .into()),
            "match_bench_unit" => Ok(__sdk::parse_reducer_args::<
                match_bench_unit_reducer::MatchBenchUnitArgs,
            >("match_bench_unit", &value.args)?
            .into()),
            "match_buy_fusion_slot" => Ok(__sdk::parse_reducer_args::<
                match_buy_fusion_slot_reducer::MatchBuyFusionSlotArgs,
            >("match_buy_fusion_slot", &value.args)?
            .into()),
            "match_complete" => Ok(__sdk::parse_reducer_args::<
                match_complete_reducer::MatchCompleteArgs,
            >("match_complete", &value.args)?
            .into()),
            "match_insert" => Ok(
                __sdk::parse_reducer_args::<match_insert_reducer::MatchInsertArgs>(
                    "match_insert",
                    &value.args,
                )?
                .into(),
            ),
            "match_move_unit" => Ok(__sdk::parse_reducer_args::<
                match_move_unit_reducer::MatchMoveUnitArgs,
            >("match_move_unit", &value.args)?
            .into()),
            "match_sell_unit" => Ok(__sdk::parse_reducer_args::<
                match_sell_unit_reducer::MatchSellUnitArgs,
            >("match_sell_unit", &value.args)?
            .into()),
            "match_shop_buy" => Ok(__sdk::parse_reducer_args::<
                match_shop_buy_reducer::MatchShopBuyArgs,
            >("match_shop_buy", &value.args)?
            .into()),
            "match_shop_reroll" => Ok(__sdk::parse_reducer_args::<
                match_shop_reroll_reducer::MatchShopRerollArgs,
            >("match_shop_reroll", &value.args)?
            .into()),
            "match_start_battle" => Ok(__sdk::parse_reducer_args::<
                match_start_battle_reducer::MatchStartBattleArgs,
            >("match_start_battle", &value.args)?
            .into()),
            "match_submit_battle_result" => {
                Ok(__sdk::parse_reducer_args::<
                    match_submit_battle_result_reducer::MatchSubmitBattleResultArgs,
                >("match_submit_battle_result", &value.args)?
                .into())
            }
            "register" => Ok(__sdk::parse_reducer_args::<register_reducer::RegisterArgs>(
                "register",
                &value.args,
            )?
            .into()),
            "set_password" => Ok(
                __sdk::parse_reducer_args::<set_password_reducer::SetPasswordArgs>(
                    "set_password",
                    &value.args,
                )?
                .into(),
            ),
            unknown => {
                Err(
                    __sdk::InternalError::unknown_name("reducer", unknown, "ReducerCallInfo")
                        .into(),
                )
            }
        }
    }
}

#[derive(Default)]
#[allow(non_snake_case)]
#[doc(hidden)]
pub struct DbUpdate {
    daily_update_timer: __sdk::TableUpdate<DailyUpdateTimer>,
    global_data: __sdk::TableUpdate<GlobalData>,
    global_settings: __sdk::TableUpdate<GlobalSettings>,
    node_links: __sdk::TableUpdate<TNodeLink>,
    nodes_world: __sdk::TableUpdate<TNode>,
    player_link_selections: __sdk::TableUpdate<TPlayerLinkSelection>,
}

impl TryFrom<__ws::DatabaseUpdate<__ws::BsatnFormat>> for DbUpdate {
    type Error = __sdk::Error;
    fn try_from(raw: __ws::DatabaseUpdate<__ws::BsatnFormat>) -> Result<Self, Self::Error> {
        let mut db_update = DbUpdate::default();
        for table_update in raw.tables {
            match &table_update.table_name[..] {
                "daily_update_timer" => db_update
                    .daily_update_timer
                    .append(daily_update_timer_table::parse_table_update(table_update)?),
                "global_data" => db_update
                    .global_data
                    .append(global_data_table::parse_table_update(table_update)?),
                "global_settings" => db_update
                    .global_settings
                    .append(global_settings_table::parse_table_update(table_update)?),
                "node_links" => db_update
                    .node_links
                    .append(node_links_table::parse_table_update(table_update)?),
                "nodes_world" => db_update
                    .nodes_world
                    .append(nodes_world_table::parse_table_update(table_update)?),
                "player_link_selections" => db_update.player_link_selections.append(
                    player_link_selections_table::parse_table_update(table_update)?,
                ),

                unknown => {
                    return Err(__sdk::InternalError::unknown_name(
                        "table",
                        unknown,
                        "DatabaseUpdate",
                    )
                    .into());
                }
            }
        }
        Ok(db_update)
    }
}

impl __sdk::InModule for DbUpdate {
    type Module = RemoteModule;
}

impl __sdk::DbUpdate for DbUpdate {
    fn apply_to_client_cache(
        &self,
        cache: &mut __sdk::ClientCache<RemoteModule>,
    ) -> AppliedDiff<'_> {
        let mut diff = AppliedDiff::default();

        diff.daily_update_timer = cache
            .apply_diff_to_table::<DailyUpdateTimer>("daily_update_timer", &self.daily_update_timer)
            .with_updates_by_pk(|row| &row.scheduled_id);
        diff.global_data =
            cache.apply_diff_to_table::<GlobalData>("global_data", &self.global_data);
        diff.global_settings =
            cache.apply_diff_to_table::<GlobalSettings>("global_settings", &self.global_settings);
        diff.node_links = cache
            .apply_diff_to_table::<TNodeLink>("node_links", &self.node_links)
            .with_updates_by_pk(|row| &row.id);
        diff.nodes_world = cache
            .apply_diff_to_table::<TNode>("nodes_world", &self.nodes_world)
            .with_updates_by_pk(|row| &row.id);
        diff.player_link_selections = cache
            .apply_diff_to_table::<TPlayerLinkSelection>(
                "player_link_selections",
                &self.player_link_selections,
            )
            .with_updates_by_pk(|row| &row.id);

        diff
    }
}

#[derive(Default)]
#[allow(non_snake_case)]
#[doc(hidden)]
pub struct AppliedDiff<'r> {
    daily_update_timer: __sdk::TableAppliedDiff<'r, DailyUpdateTimer>,
    global_data: __sdk::TableAppliedDiff<'r, GlobalData>,
    global_settings: __sdk::TableAppliedDiff<'r, GlobalSettings>,
    node_links: __sdk::TableAppliedDiff<'r, TNodeLink>,
    nodes_world: __sdk::TableAppliedDiff<'r, TNode>,
    player_link_selections: __sdk::TableAppliedDiff<'r, TPlayerLinkSelection>,
}

impl __sdk::InModule for AppliedDiff<'_> {
    type Module = RemoteModule;
}

impl<'r> __sdk::AppliedDiff<'r> for AppliedDiff<'r> {
    fn invoke_row_callbacks(
        &self,
        event: &EventContext,
        callbacks: &mut __sdk::DbCallbacks<RemoteModule>,
    ) {
        callbacks.invoke_table_row_callbacks::<DailyUpdateTimer>(
            "daily_update_timer",
            &self.daily_update_timer,
            event,
        );
        callbacks.invoke_table_row_callbacks::<GlobalData>("global_data", &self.global_data, event);
        callbacks.invoke_table_row_callbacks::<GlobalSettings>(
            "global_settings",
            &self.global_settings,
            event,
        );
        callbacks.invoke_table_row_callbacks::<TNodeLink>("node_links", &self.node_links, event);
        callbacks.invoke_table_row_callbacks::<TNode>("nodes_world", &self.nodes_world, event);
        callbacks.invoke_table_row_callbacks::<TPlayerLinkSelection>(
            "player_link_selections",
            &self.player_link_selections,
            event,
        );
    }
}

#[doc(hidden)]
pub struct RemoteModule;

impl __sdk::InModule for RemoteModule {
    type Module = Self;
}

/// The `reducers` field of [`EventContext`] and [`DbConnection`],
/// with methods provided by extension traits for each reducer defined by the module.
pub struct RemoteReducers {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for RemoteReducers {
    type Module = RemoteModule;
}

#[doc(hidden)]
/// The `set_reducer_flags` field of [`DbConnection`],
/// with methods provided by extension traits for each reducer defined by the module.
/// Each method sets the flags for the reducer with the same name.
///
/// This type is currently unstable and may be removed without a major version bump.
pub struct SetReducerFlags {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for SetReducerFlags {
    type Module = RemoteModule;
}

/// The `db` field of [`EventContext`] and [`DbConnection`],
/// with methods provided by extension traits for each table defined by the module.
pub struct RemoteTables {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for RemoteTables {
    type Module = RemoteModule;
}

/// A connection to a remote module, including a materialized view of a subset of the database.
///
/// Connect to a remote module by calling [`DbConnection::builder`]
/// and using the [`__sdk::DbConnectionBuilder`] builder-pattern constructor.
///
/// You must explicitly advance the connection by calling any one of:
///
/// - [`DbConnection::frame_tick`].
/// - [`DbConnection::run_threaded`].
/// - [`DbConnection::run_async`].
/// - [`DbConnection::advance_one_message`].
/// - [`DbConnection::advance_one_message_blocking`].
/// - [`DbConnection::advance_one_message_async`].
///
/// Which of these methods you should call depends on the specific needs of your application,
/// but you must call one of them, or else the connection will never progress.
pub struct DbConnection {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    #[doc(hidden)]
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,

    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for DbConnection {
    type Module = RemoteModule;
}

impl __sdk::DbContext for DbConnection {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
    fn try_connection_id(&self) -> Option<__sdk::ConnectionId> {
        self.imp.try_connection_id()
    }
}

impl DbConnection {
    /// Builder-pattern constructor for a connection to a remote module.
    ///
    /// See [`__sdk::DbConnectionBuilder`] for required and optional configuration for the new connection.
    pub fn builder() -> __sdk::DbConnectionBuilder<RemoteModule> {
        __sdk::DbConnectionBuilder::new()
    }

    /// If any WebSocket messages are waiting, process one of them.
    ///
    /// Returns `true` if a message was processed, or `false` if the queue is empty.
    /// Callers should invoke this message in a loop until it returns `false`
    /// or for as much time is available to process messages.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::frame_tick`] each frame
    /// to fully exhaust the queue whenever time is available.
    pub fn advance_one_message(&self) -> __sdk::Result<bool> {
        self.imp.advance_one_message()
    }

    /// Process one WebSocket message, potentially blocking the current thread until one is received.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::run_threaded`] to spawn a thread
    /// which advances the connection automatically.
    pub fn advance_one_message_blocking(&self) -> __sdk::Result<()> {
        self.imp.advance_one_message_blocking()
    }

    /// Process one WebSocket message, `await`ing until one is received.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::run_async`] to run an `async` loop
    /// which advances the connection when polled.
    pub async fn advance_one_message_async(&self) -> __sdk::Result<()> {
        self.imp.advance_one_message_async().await
    }

    /// Process all WebSocket messages waiting in the queue,
    /// then return without `await`ing or blocking the current thread.
    pub fn frame_tick(&self) -> __sdk::Result<()> {
        self.imp.frame_tick()
    }

    /// Spawn a thread which processes WebSocket messages as they are received.
    pub fn run_threaded(&self) -> std::thread::JoinHandle<()> {
        self.imp.run_threaded()
    }

    /// Run an `async` loop which processes WebSocket messages when polled.
    pub async fn run_async(&self) -> __sdk::Result<()> {
        self.imp.run_async().await
    }
}

impl __sdk::DbConnection for DbConnection {
    fn new(imp: __sdk::DbContextImpl<RemoteModule>) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            imp,
        }
    }
}

/// A handle on a subscribed query.
// TODO: Document this better after implementing the new subscription API.
#[derive(Clone)]
pub struct SubscriptionHandle {
    imp: __sdk::SubscriptionHandleImpl<RemoteModule>,
}

impl __sdk::InModule for SubscriptionHandle {
    type Module = RemoteModule;
}

impl __sdk::SubscriptionHandle for SubscriptionHandle {
    fn new(imp: __sdk::SubscriptionHandleImpl<RemoteModule>) -> Self {
        Self { imp }
    }

    /// Returns true if this subscription has been terminated due to an unsubscribe call or an error.
    fn is_ended(&self) -> bool {
        self.imp.is_ended()
    }

    /// Returns true if this subscription has been applied and has not yet been unsubscribed.
    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    /// Unsubscribe from the query controlled by this `SubscriptionHandle`,
    /// then run `on_end` when its rows are removed from the client cache.
    fn unsubscribe_then(self, on_end: __sdk::OnEndedCallback<RemoteModule>) -> __sdk::Result<()> {
        self.imp.unsubscribe_then(Some(on_end))
    }

    fn unsubscribe(self) -> __sdk::Result<()> {
        self.imp.unsubscribe_then(None)
    }
}

/// Alias trait for a [`__sdk::DbContext`] connected to this module,
/// with that trait's associated types bounded to this module's concrete types.
///
/// Users can use this trait as a boundary on definitions which should accept
/// either a [`DbConnection`] or an [`EventContext`] and operate on either.
pub trait RemoteDbContext:
    __sdk::DbContext<
    DbView = RemoteTables,
    Reducers = RemoteReducers,
    SetReducerFlags = SetReducerFlags,
    SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>,
>
{
}
impl<
        Ctx: __sdk::DbContext<
            DbView = RemoteTables,
            Reducers = RemoteReducers,
            SetReducerFlags = SetReducerFlags,
            SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>,
        >,
    > RemoteDbContext for Ctx
{
}

/// An [`__sdk::DbContext`] augmented with a [`__sdk::Event`],
/// passed to [`__sdk::Table::on_insert`], [`__sdk::Table::on_delete`] and [`__sdk::TableWithPrimaryKey::on_update`] callbacks.
pub struct EventContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    /// The event which caused these callbacks to run.
    pub event: __sdk::Event<Reducer>,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for EventContext {
    type Event = __sdk::Event<Reducer>;
    fn event(&self) -> &Self::Event {
        &self.event
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            event,
            imp,
        }
    }
}

impl __sdk::InModule for EventContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for EventContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
    fn try_connection_id(&self) -> Option<__sdk::ConnectionId> {
        self.imp.try_connection_id()
    }
}

impl __sdk::EventContext for EventContext {}

/// An [`__sdk::DbContext`] augmented with a [`__sdk::ReducerEvent`],
/// passed to on-reducer callbacks.
pub struct ReducerEventContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    /// The event which caused these callbacks to run.
    pub event: __sdk::ReducerEvent<Reducer>,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for ReducerEventContext {
    type Event = __sdk::ReducerEvent<Reducer>;
    fn event(&self) -> &Self::Event {
        &self.event
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            event,
            imp,
        }
    }
}

impl __sdk::InModule for ReducerEventContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for ReducerEventContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
    fn try_connection_id(&self) -> Option<__sdk::ConnectionId> {
        self.imp.try_connection_id()
    }
}

impl __sdk::ReducerEventContext for ReducerEventContext {}

/// An [`__sdk::DbContext`] passed to [`__sdk::SubscriptionBuilder::on_applied`] and [`SubscriptionHandle::unsubscribe_then`] callbacks.
pub struct SubscriptionEventContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for SubscriptionEventContext {
    type Event = ();
    fn event(&self) -> &Self::Event {
        &()
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, _event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            imp,
        }
    }
}

impl __sdk::InModule for SubscriptionEventContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for SubscriptionEventContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
    fn try_connection_id(&self) -> Option<__sdk::ConnectionId> {
        self.imp.try_connection_id()
    }
}

impl __sdk::SubscriptionEventContext for SubscriptionEventContext {}

/// An [`__sdk::DbContext`] augmented with a [`__sdk::Error`],
/// passed to [`__sdk::DbConnectionBuilder::on_disconnect`], [`__sdk::DbConnectionBuilder::on_connect_error`] and [`__sdk::SubscriptionBuilder::on_error`] callbacks.
pub struct ErrorContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    /// The event which caused these callbacks to run.
    pub event: Option<__sdk::Error>,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for ErrorContext {
    type Event = Option<__sdk::Error>;
    fn event(&self) -> &Self::Event {
        &self.event
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            event,
            imp,
        }
    }
}

impl __sdk::InModule for ErrorContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for ErrorContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
    fn try_connection_id(&self) -> Option<__sdk::ConnectionId> {
        self.imp.try_connection_id()
    }
}

impl __sdk::ErrorContext for ErrorContext {}

impl __sdk::SpacetimeModule for RemoteModule {
    type DbConnection = DbConnection;
    type EventContext = EventContext;
    type ReducerEventContext = ReducerEventContext;
    type SubscriptionEventContext = SubscriptionEventContext;
    type ErrorContext = ErrorContext;
    type Reducer = Reducer;
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;
    type DbUpdate = DbUpdate;
    type AppliedDiff<'r> = AppliedDiff<'r>;
    type SubscriptionHandle = SubscriptionHandle;

    fn register_tables(client_cache: &mut __sdk::ClientCache<Self>) {
        daily_update_timer_table::register_table(client_cache);
        global_data_table::register_table(client_cache);
        global_settings_table::register_table(client_cache);
        node_links_table::register_table(client_cache);
        nodes_world_table::register_table(client_cache);
        player_link_selections_table::register_table(client_cache);
    }
}
